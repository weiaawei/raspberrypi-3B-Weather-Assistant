#include "../include/oled_display.h"

// 基本5x7字体
static const uint8_t font5x7[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, // 空格
    0x00, 0x00, 0x5F, 0x00, 0x00, // !
    0x00, 0x07, 0x00, 0x07, 0x00, // "
    0x14, 0x7F, 0x14, 0x7F, 0x14, // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
    0x23, 0x13, 0x08, 0x64, 0x62, // %
    0x36, 0x49, 0x55, 0x22, 0x50, // &
    0x00, 0x05, 0x03, 0x00, 0x00, // '
    0x00, 0x1C, 0x22, 0x41, 0x00, // (
    0x00, 0x41, 0x22, 0x1C, 0x00, // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
    0x08, 0x08, 0x3E, 0x08, 0x08, // +
    0x00, 0x50, 0x30, 0x00, 0x00, // ,
    0x08, 0x08, 0x08, 0x08, 0x08, // -
    0x00, 0x60, 0x60, 0x00, 0x00, // .
    0x20, 0x10, 0x08, 0x04, 0x02, // /
    0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
    0x00, 0x42, 0x7F, 0x40, 0x00, // 1
    0x42, 0x61, 0x51, 0x49, 0x46, // 2
    0x21, 0x41, 0x45, 0x4B, 0x31, // 3
    0x18, 0x14, 0x12, 0x7F, 0x10, // 4
    0x27, 0x45, 0x45, 0x45, 0x39, // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
    0x01, 0x71, 0x09, 0x05, 0x03, // 7
    0x36, 0x49, 0x49, 0x49, 0x36, // 8
    0x06, 0x49, 0x49, 0x29, 0x1E, // 9
    0x00, 0x36, 0x36, 0x00, 0x00, // :
    0x00, 0x56, 0x36, 0x00, 0x00, // ;
    0x00, 0x08, 0x14, 0x22, 0x41, // <
    0x14, 0x14, 0x14, 0x14, 0x14, // =
    0x41, 0x22, 0x14, 0x08, 0x00, // >
    0x02, 0x01, 0x51, 0x09, 0x06, // ?
    0x32, 0x49, 0x79, 0x41, 0x3E, // @
    0x7E, 0x11, 0x11, 0x11, 0x7E, // A
    0x7F, 0x49, 0x49, 0x49, 0x36, // B
    0x3E, 0x41, 0x41, 0x41, 0x22, // C
    0x7F, 0x41, 0x41, 0x22, 0x1C, // D
    0x7F, 0x49, 0x49, 0x49, 0x41, // E
    0x7F, 0x09, 0x09, 0x01, 0x01, // F
    0x3E, 0x41, 0x41, 0x49, 0x7A, // G
    0x7F, 0x08, 0x08, 0x08, 0x7F, // H
    0x00, 0x41, 0x7F, 0x41, 0x00, // I
    0x20, 0x40, 0x41, 0x3F, 0x01, // J
    0x7F, 0x08, 0x14, 0x22, 0x41, // K
    0x7F, 0x40, 0x40, 0x40, 0x40, // L
    0x7F, 0x02, 0x04, 0x02, 0x7F, // M
    0x7F, 0x04, 0x08, 0x10, 0x7F, // N
    0x3E, 0x41, 0x41, 0x41, 0x3E, // O
    0x7F, 0x09, 0x09, 0x09, 0x06, // P
    0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
    0x7F, 0x09, 0x19, 0x29, 0x46, // R
    0x46, 0x49, 0x49, 0x49, 0x31, // S
    0x01, 0x01, 0x7F, 0x01, 0x01, // T
    0x3F, 0x40, 0x40, 0x40, 0x3F, // U
    0x1F, 0x20, 0x40, 0x20, 0x1F, // V
    0x7F, 0x20, 0x18, 0x20, 0x7F, // W
    0x63, 0x14, 0x08, 0x14, 0x63, // X
    0x03, 0x04, 0x78, 0x04, 0x03, // Y
    0x61, 0x51, 0x49, 0x45, 0x43, // Z
    0x00, 0x00, 0x7F, 0x41, 0x41, // [
    0x02, 0x04, 0x08, 0x10, 0x20, // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00, // ]
    0x04, 0x02, 0x01, 0x02, 0x04, // ^
    0x40, 0x40, 0x40, 0x40, 0x40, // _
    0x00, 0x01, 0x02, 0x04, 0x00, // `
    0x20, 0x54, 0x54, 0x54, 0x78, // a
    0x7F, 0x48, 0x44, 0x44, 0x38, // b
    0x38, 0x44, 0x44, 0x44, 0x20, // c
    0x38, 0x44, 0x44, 0x48, 0x7F, // d
    0x38, 0x54, 0x54, 0x54, 0x18, // e
    0x08, 0x7E, 0x09, 0x01, 0x02, // f
    0x08, 0x14, 0x54, 0x54, 0x3C, // g
    0x7F, 0x08, 0x04, 0x04, 0x78, // h
    0x00, 0x44, 0x7D, 0x40, 0x00, // i
    0x20, 0x40, 0x44, 0x3D, 0x00, // j
    0x00, 0x7F, 0x10, 0x28, 0x44, // k
    0x00, 0x41, 0x7F, 0x40, 0x00, // l
    0x7C, 0x04, 0x18, 0x04, 0x78, // m
    0x7C, 0x08, 0x04, 0x04, 0x78, // n
    0x38, 0x44, 0x44, 0x44, 0x38, // o
    0x7C, 0x14, 0x14, 0x14, 0x08, // p
    0x08, 0x14, 0x14, 0x18, 0x7C, // q
    0x7C, 0x08, 0x04, 0x04, 0x08, // r
    0x48, 0x54, 0x54, 0x54, 0x20, // s
    0x04, 0x3F, 0x44, 0x40, 0x20, // t
    0x3C, 0x40, 0x40, 0x20, 0x7C, // u
    0x1C, 0x20, 0x40, 0x20, 0x1C, // v
    0x3C, 0x40, 0x30, 0x40, 0x3C, // w
    0x44, 0x28, 0x10, 0x28, 0x44, // x
    0x0C, 0x50, 0x50, 0x50, 0x3C, // y
    0x44, 0x64, 0x54, 0x4C, 0x44, // z
    0x00, 0x08, 0x36, 0x41, 0x00, // {
    0x00, 0x00, 0x7F, 0x00, 0x00, // |
    0x00, 0x41, 0x36, 0x08, 0x00, // }
    0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
    0x08, 0x1C, 0x2A, 0x08, 0x08  // <-
};

OLEDDisplay::OLEDDisplay(const std::string &i2c_device, uint8_t address)
    : address(address), fd(-1)
{
    // 打开I2C设备
    fd = open(i2c_device.c_str(), O_RDWR);
    if (fd < 0)
    {
        throw std::runtime_error("无法打开I2C设备: " + i2c_device);
    }

    // 设置I2C从设备地址
    if (ioctl(fd, I2C_SLAVE, address) < 0)
    {
        close(fd);
        throw std::runtime_error("无法设置I2C从设备地址");
    }

    // 清空缓冲区
    memset(buffer, 0, sizeof(buffer));
}

OLEDDisplay::~OLEDDisplay()
{
    if (fd >= 0)
    {
        // 关闭显示
        sendCommand(SSD1306_DISPLAYOFF);
        close(fd);
    }
}

void OLEDDisplay::initialize()
{
    // 初始化SSD1306 OLED显示屏
    sendCommand(SSD1306_DISPLAYOFF);         // 0xAE
    sendCommand(SSD1306_SETDISPLAYCLOCKDIV); // 0xD5
    sendCommand(0x80);                       // 建议值
    sendCommand(SSD1306_SETMULTIPLEX);       // 0xA8
    sendCommand(OLED_HEIGHT - 1);
    sendCommand(SSD1306_SETDISPLAYOFFSET);   // 0xD3
    sendCommand(0x0);                        // 无偏移
    sendCommand(SSD1306_SETSTARTLINE | 0x0); // 行起始地址0
    sendCommand(SSD1306_CHARGEPUMP);         // 0x8D
    sendCommand(0x14);                       // 启用电荷泵
    sendCommand(SSD1306_MEMORYMODE);         // 0x20
    sendCommand(0x00);                       // 水平寻址模式
    sendCommand(SSD1306_SEGREMAP | 0x1);     // 列地址127映射到SEG0
    sendCommand(SSD1306_COMSCANDEC);         // 颠倒COM扫描方向
    sendCommand(SSD1306_SETCOMPINS);         // 0xDA
    sendCommand(0x12);
    sendCommand(SSD1306_SETCONTRAST); // 0x81
    sendCommand(0xCF);
    sendCommand(SSD1306_SETPRECHARGE); // 0xD9
    sendCommand(0xF1);
    sendCommand(SSD1306_SETVCOMDETECT); // 0xDB
    sendCommand(0x40);
    sendCommand(SSD1306_DISPLAYALLON_RESUME); // 0xA4
    sendCommand(SSD1306_NORMALDISPLAY);       // 0xA6
    sendCommand(SSD1306_DISPLAYON);           // 0xAF

    // 清屏
    clear();
    display();
}

void OLEDDisplay::sendCommand(uint8_t command)
{
    uint8_t buffer[2];
    buffer[0] = SSD1306_COMMAND;
    buffer[1] = command;

    if (write(fd, buffer, 2) != 2)
    {
        std::cerr << "I2C写入命令失败" << std::endl;
    }
}

void OLEDDisplay::sendData(const uint8_t *data, size_t size)
{
    // 创建一个临时缓冲区，包含控制字节和数据
    uint8_t *temp = new uint8_t[size + 1];
    temp[0] = SSD1306_DATA;
    memcpy(temp + 1, data, size);

    if (write(fd, temp, size + 1) != static_cast<ssize_t>(size + 1))
    {
        std::cerr << "I2C写入数据失败" << std::endl;
    }

    delete[] temp;
}

void OLEDDisplay::clear()
{
    memset(buffer, 0, sizeof(buffer));
}

void OLEDDisplay::display()
{
    // 设置列地址范围
    sendCommand(SSD1306_COLUMNADDR);
    sendCommand(0);              // 列起始地址
    sendCommand(OLED_WIDTH - 1); // 列结束地址

    // 设置页地址范围
    sendCommand(SSD1306_PAGEADDR);
    sendCommand(0);              // 页起始地址
    sendCommand(OLED_PAGES - 1); // 页结束地址

    // 写入缓冲区数据
    sendData(buffer, sizeof(buffer));
}

void OLEDDisplay::setPixel(int x, int y, bool on)
{
    if (x < 0 || x >= OLED_WIDTH || y < 0 || y >= OLED_HEIGHT)
    {
        return;
    }

    // 计算像素在缓冲区中的位置
    int page = y / 8;
    int bit = y % 8;
    int index = x + page * OLED_WIDTH;

    if (on)
    {
        buffer[index] |= (1 << bit);
    }
    else
    {
        buffer[index] &= ~(1 << bit);
    }
}

void OLEDDisplay::drawChar(int x, int y, char c, bool invert)
{
    // 确保字符在可显示范围内
    if (c < ' ' || c > '~')
    {
        c = '?';
    }

    // 计算字符在字体数组中的偏移
    c -= ' ';
    int offset = c * 5;

    // 绘制字符的每一列
    for (int col = 0; col < 5; col++)
    {
        uint8_t line = font5x7[offset + col];

        for (int row = 0; row < 8; row++)
        {
            bool pixel = (line & (1 << row)) != 0;
            if (invert)
            {
                pixel = !pixel;
            }
            setPixel(x + col, y + row, pixel);
        }
    }
}

void OLEDDisplay::drawString(int x, int y, const std::string &text, bool invert)
{
    int cursorX = x;

    for (char c : text)
    {
        drawChar(cursorX, y, c, invert);
        cursorX += 6; // 5像素宽度 + 1像素间距

        // 如果超出屏幕宽度，换行
        if (cursorX > OLED_WIDTH - 6)
        {
            cursorX = x;
            y += 8;

            // 如果超出屏幕高度，停止绘制
            if (y > OLED_HEIGHT - 8)
            {
                break;
            }
        }
    }
}

void OLEDDisplay::drawRect(int x, int y, int width, int height, bool fill)
{
    // 确保矩形在屏幕范围内
    if (x < 0)
    {
        width += x;
        x = 0;
    }
    if (y < 0)
    {
        height += y;
        y = 0;
    }
    if (x + width > OLED_WIDTH)
    {
        width = OLED_WIDTH - x;
    }
    if (y + height > OLED_HEIGHT)
    {
        height = OLED_HEIGHT - y;
    }

    if (width <= 0 || height <= 0)
    {
        return;
    }

    if (fill)
    {
        // 填充矩形
        for (int i = x; i < x + width; i++)
        {
            for (int j = y; j < y + height; j++)
            {
                setPixel(i, j, true);
            }
        }
    }
    else
    {
        // 绘制矩形边框
        for (int i = x; i < x + width; i++)
        {
            setPixel(i, y, true);
            setPixel(i, y + height - 1, true);
        }
        for (int j = y; j < y + height; j++)
        {
            setPixel(x, j, true);
            setPixel(x + width - 1, j, true);
        }
    }
}

void OLEDDisplay::drawLine(int x0, int y0, int x1, int y1)
{
    // 使用Bresenham算法绘制直线
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    int sx = (x0 < x1) ? 1 : -1;
    int sy = (y0 < y1) ? 1 : -1;
    int err = dx - dy;

    while (true)
    {
        setPixel(x0, y0, true);

        if (x0 == x1 && y0 == y1)
        {
            break;
        }

        int e2 = 2 * err;
        if (e2 > -dy)
        {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dx)
        {
            err += dx;
            y0 += sy;
        }
    }
}